合成（Composite）模式：
1. 结构型模式一种 还可以称为部分-整体模式 ，合成模式提供一个树结构中所有对象的统一接口 ,
 规范树中单独对象和合成对象的构建过程 , 合成模式更像一个数据结构。
 
2.合成模式由抽象构件、树枝构件、树叶构件三部分组成 .
	1）抽象构件 , 为树结构中节点对象定义接口以及默认行为 .
	2）树枝构件 , 拥有下一级树叶节点对象 , 同时对树叶节点对象进行管理 .
	3）树叶构件 , 没有下一级节点对象 , 树结构最末端 , 由该对象组成上一级的树枝节点对象
	
3.合成模式种类分为透明式和安全式 , 主要区分在于树枝构件中 , 管理方法是在抽象构件中定义 , 还是直接在树枝构件中定义.
	1）透明式 , 管理方法在抽象构件中定义 , 同时树叶节点需要用平庸的方式实现管理方法 .
	2）安全式 , 在树枝构件中直接定义管理方法 , 这样避免在树叶构件中进行定义。
	
4.合成模式 (树结构) 的方向性 , 分为三类 , 向下、向上、双向 .
	1）向下性 , 一般情况结构为向下性 , 也就是父类节点中包含子节点的引用 , 而子节点并不知道它的父节点 
	2）向上性 , 每一个子节点中都包含一个父类节点的引用 , 同时父节点是不知道子节点的情况
	3）双向性 , 父节点和子节点都包含有对方的引用 , 当需要使用时 , 可以利用引用找到对方

5.合成模式优缺点
	1）增加新种类构建变得轻松 ，客户端不需要知道当前使用的构建为树枝节点还是树叶节点。
	2）控制树枝构建的类型就不太容易 继承的方式完成新功能的增加变得困难 , 因为需要对继承的所有对象进行新功能
                增加的实现工作 。
http://www.iteye.com/topic/121148
http://lavasoft.blog.51cto.com/62575/90824/
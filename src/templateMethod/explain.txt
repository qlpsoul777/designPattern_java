模板方法(Template Method)模式

1.定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。该模式使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。

2.结构：
  1) AbstractClass（抽象类）：定义了一到多个的抽象方法，以供具体的子类来实现它们；而且还要实现一个模板方法，来定义一个算法的骨架。
            该模板方法不仅调用前面的抽象方法，也可以调用其他的操作，只要能完成自身的使命。
　  2) ConcreteClass（具体类）：实现父类中的抽象方法以完成算法中与特定子类相关的步骤

3.优点:
   1)封装不变部分，扩展可变部分。
   2)提取公共部分代码，便于维护。
   3)行为由父类控制，子类实现。
   
4.缺点：
按照我们设计习惯，抽象类负责声明最抽象、最一般的事物属性和方法，实现类完成具体的事物属性和方法，但是模板方法模式却颠倒了，抽象类定义了部分
 抽象方法，由子类实现，子类执行的结果影响了父类的结果，也就是子类对父类产生了影响，这在复杂的项目中，会带来代码阅读的难度，而且也会让新手产生
 不适感。
 
5.适用场景：
    1)多个子类有公有的方法，并且逻辑基本相同时。
    2)重要、复杂的算法，可以把核心算法设计为模板方法，周边的相关细节功能则由各个子类实现。
    3)重构时，模板方法模式是一个经常使用的模式，把相同的代码抽取到父类中，然后通过钩子函数（见“模板方法模式的扩展”）约束其行为。
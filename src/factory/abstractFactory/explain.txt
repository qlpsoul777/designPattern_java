抽象工厂模式(Abstract Factory Pattern)

1.为创建一组相关或相互依赖的对象提供一个接口，而且无需指定他们的具体类。

2.参与类或接口作用：
  1、AbstractFactory：定义一个接口用来创建抽象产品，担任这个角色的是工厂方法模式的核心，它是与应用系统商业逻辑无关的。
　 2、ConcreteFactory：这个角色直接在客户端的调用下创建产品的实例。这个角色含有选择合适的产品对象的逻辑，
               而这个逻辑是与应用系统的商业逻辑紧密相关的。 
　3、AbstractProduct：担任这个角色的类是工厂方法模式所创建的对象的父类，或它们共同拥有的接口。
　4、Product：抽象工厂模式所创建的任何产品对象都是某一个具体产品类的实例。这是客户端最终需要的东西，其内部一定充满了应用系统的商业逻辑。
　5、Client：调用AbstractFactory和AbstractProduct的接口。

3.优点
    1、分离具体类，抽象工厂创建一系列对象的类，封装创建产品对象的职责和过程，它实现了客户和类的分离。
    2、易于创建不同系列的产品，当客户类要创建不同系列的产品适合执行修改具体工厂就OK了
    3、有利于产品的一致性，当一个系列的产品对象被设计成一起工作时，一个应用一次只能使用同一个系列中的对象，这一点很重要，
     而抽象工厂很容易实现这一点。
     
4.缺点
     难以扩展抽象工厂生产新的产品，假设我们修改抽象工厂生产新的产品，那么这将导致其他类的级联修改不便于维护。

  